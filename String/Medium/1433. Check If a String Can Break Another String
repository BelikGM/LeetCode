1433. Check If a String Can Break Another String

Given two strings: s1 and s2 with the same size, check if some permutation of string s1 can break some permutation of string s2 or vice-versa. In other words s2 can break s1 or vice-versa.
A string x can break string y (both of size n) if x[i] >= y[i] (in alphabetical order) for all i between 0 and n-1.
Example 1:

Input: s1 = "abc", s2 = "xya"
Output: true
Explanation: "ayx" is a permutation of s2="xya" which can break to string "abc" which is a permutation of s1="abc".
Example 2:

Input: s1 = "abe", s2 = "acd"
Output: false 
Explanation: All permutations for s1="abe" are: "abe", "aeb", "bae", "bea", "eab" and "eba" and all permutation for s2="acd" are: "acd", "adc", "cad", "cda", "dac" and "dca". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa.
Example 3:

Input: s1 = "leetcodee", s2 = "interview"
Output: true
////////////////////////    SOLUTION
class Solution {
public:
    bool checkIfCanBreak(string s1, string s2) {
        int size = s1.size();
        if(size>1000)
        return 0;
    char * first = s1.data();
    char * second = s2.data();
    int temp = 0;
    for(int j = 0; j < size - 1 ; j++)
        for(int i = 0; i < size - 1; i++)
        {
            if(first[i]< first[i+1])
            {
                temp = first[i];
                first[i] = first[i+1];
                first[i+1] = temp;
            }
             if(second[i]< second[i+1])
            {
                temp = second[i];
                second[i] = second[i+1];
                second[i+1] = temp;
            }
        }
        
        int result =0;
    for(int i = 0;i<size;i++){
    if(first[i]>= second[i] )
     if(i!=size-1)
     continue;
     if(first[i]< second[i] )break;
    cout<<"a";
    return 1;
    }   
   
    result = 0;
    for(int i = 0;i<size;i++ ){
    if(first[i]<=second[i])
    if(i!=size-1)
     continue;
     if(first[i]> second[i] )break;
    cout<<"b";
    return 1;
    }
    return 0;
    }
};
