120. Triangle
Given a triangle array, return the minimum path sum from top to bottom.
For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.
Example 1:

Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).
Example 2:

Input: triangle = [[-10]]
Output: -10
 

Constraints:

1 <= triangle.length <= 200
triangle[0].length == 1
triangle[i].length == triangle[i - 1].length + 1
-104 <= triangle[i][j] <= 104
////// SOLUTION Runtime 3 ms Beats 83.84%  Memory 11.34 MB Beats 80.88%

class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int deep = triangle.size();
        int width = 2;
        for( int i = 1; i < deep; i++)
        {
            for(int j = 0; j < width; j++)
            {   
                if(j == 0)
                triangle[i][j] += triangle[i-1][j];
                else if(j == width - 1)
                triangle[i][j] += triangle[i-1][j-1];
                else
                {
                     triangle[i][j] += min(triangle[i-1][j], triangle[i-1][j-1]);
                }
            }
            width++;

        }
        int min = 2000001;
        for(auto i: triangle[deep-1])
            if(min > i)
            min = i;
        return min;
    }
};
