931. Minimum Falling Path Sum
Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.
A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be 
(row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).  

Example 1:

Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum as shown.

Example 2:
Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is shown.
 

Constraints:

n == matrix.length == matrix[i].length
1 <= n <= 100
-100 <= matrix[i][j] <= 100

////////// SOLUTION   Runtime 7 ms Beats 94.69%     Memory 13.14MB Beats 96.70%

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int deep = matrix.size();
        int width = matrix[0].size();
        int localmin, globalmin = 10001;
        for( int i = 1; i < deep; i++)
        {
            for(int j = 0; j < width; j++)
            {   
                if(j == 0)
                matrix[i][j] += min(matrix[i-1][0],matrix[i-1][1]);
                else if(j == width - 1)
                matrix[i][j] += min(matrix[i-1][j],matrix[i-1][j-1]);
                else
                {
                    localmin = min(matrix[i-1][j], matrix[i-1][j-1]);
                    matrix[i][j] += min(localmin, matrix[i-1][j+1]);
                }
            }

        }
        for(int j = 0; j < width; j++)
        globalmin = matrix[deep-1][j] < globalmin ? matrix[deep-1][j] : globalmin;
        return globalmin;
    }
};
